{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/directives/googlePlace.js","js/controllers/main.js","js/models/place.js","js/controllers/places.js","js/router.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","restrict","replace","template","scope","places","link","$scope","element","map","google","maps","Map","center","lat","lng","zoom","$watch","length","forEach","place","marker","Marker","position","animation","Animation","DROP","infowindow","InfoWindow","content","name","id","addListener","open","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setCenter","setZoom","googlePlace","require","location","attrs","model","options","types","componentRestrictions","autocomplete","Autocomplete","getPlace","latLng","geometry","toJSON","$setViewValue","val","MainController","$rootScope","logout","secureState","e","toState","toParams","main","message","isAuthenticated","protectedStates","includes","parseFloat","getPayload","preventDefault","isLoggedIn","$on","Place","$resource","update","method","PlacesIndexController","placesIndex","all","query","PlacesShowController","deletePlace","placesShow","$remove","get","params","delete","PlacesEditController","placesEdit","$update","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","currentUserId","UsersEditController","usersEdit","localStorage","removeItem","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\n\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map Here</div>',\n    scope: {\n      places: '='\n    },\n    link: function ($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.5087903,\n          lng: -0.1137814\n        },\n        zoom: 14\n      });\n\n      $scope.$watch('places.length', () => {\n        if($scope.places.length > 0) {\n          $scope.places.forEach((place) => {\n            const marker = new $window.google.maps.Marker({\n              position: { lat: place.lat, lng: place.lng },\n              map: map,\n              animation: $window.google.maps.Animation.DROP\n            });\n\n            const infowindow = new $window.google.maps.InfoWindow({\n              content: `<div>${ place.name }</div>\n              <a href=\"http://localhost:8000/#!/places/${ place.id }\">Click Here To View Listings For This Place ${ place.id }</a>`\n            });\n\n            marker.addListener('click', function() {\n              infowindow.open(map,marker);\n            });\n\n          });\n        }\n      });\n\n\n      // Try HTML5 geolocation else put the user in central London.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          map.setCenter(pos);\n          map.setZoom(18);\n        });\n      }\n\n    }\n  };\n}\n","angular.module('finalProject')\n.directive('googlePlace', googlePlace);\n\ngooglePlace.$inject = ['$window'];\n\nfunction googlePlace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      location: '=',\n      lat: '=',\n      lng: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n        scope.lat = latLng.lat;\n        scope.lng = latLng.lng;\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\n\nfunction MainController($auth, $state, $rootScope) {\n\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit'\n    && parseFloat(toParams.id) !== $auth.getPayload().id) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('PlacesIndexController', PlacesIndexController)\n.controller('PlacesShowController', PlacesShowController);\n\nPlacesIndexController.$inject = ['Place'];\nfunction PlacesIndexController(Place) {\n  const placesIndex = this;\n\n  placesIndex.all = Place.query();\n\n}\n\nPlacesShowController.$inject = ['Place', '$state'];\nfunction PlacesShowController(Place, $state) {\n  const placesShow = this;\n\n  placesShow.place = Place.get($state.params);\n\n  function deletePlace() {\n    placesShow.place.$remove(() => {\n      $state.go('placesIndex');\n    });\n  }\n\n  placesShow.delete = deletePlace;\n}\n\nPlacesEditController.$inject = ['Place', '$state'];\nfunction PlacesEditController(Place, $state) {\n  const placesEdit = this;\n\n  placesEdit.place = Place.get($state.params);\n\n  function update() {\n    placesEdit.place.$update(() => {\n      $state.go('placesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n    .state('placesIndex', {\n      url: '/places',\n      templateUrl: '/templates/placesIndex.html',\n      controller: 'PlacesIndexController as placesIndex'\n    })\n\n    .state('placesShow', {\n      url: '/places/:id',\n      templateUrl: '/templates/placesShow.html',\n      controller: 'PlacesShowController as placesShow'\n    });\n\n  $urlRouterProvider.otherwise('/login');\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n  usersShow.currentUserId = $auth.getPayload().id; // { id: 1 }\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return usersShow.user.id === usersShow.currentUserId;\n  }\n\n  usersShow.isCurrentUser = isCurrentUser();\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n  function logout() {\n    localStorage.removeItem('token');\n    $state.go('login');\n  }\n  usersEdit.logout = logout;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}