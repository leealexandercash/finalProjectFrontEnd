{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/directives/googlePlace.js","js/controllers/listings.js","js/controllers/main.js","js/models/place.js","js/controllers/places.js","js/router.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","restrict","replace","template","scope","places","link","$scope","element","map","google","maps","Map","center","lat","lng","zoom","$watch","console","log","length","forEach","place","marker","Marker","position","animation","Animation","DROP","infowindow","InfoWindow","content","name","id","addListener","open","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setCenter","setZoom","googlePlace","require","attrs","model","options","types","componentRestrictions","autocomplete","Autocomplete","getPlace","latLng","geometry","location","toJSON","$setViewValue","val","ListingsIndexController","Listing","listingsIndex","all","query","ListingsShowController","deleteListing","listingsShow","listing","$remove","get","params","delete","ListingsEditController","update","listingsEdit","$update","ListingsNewController","$listing","create","listingsNew","MainController","$rootScope","logout","secureState","e","toState","toParams","main","message","isAuthenticated","protectedStates","includes","parseFloat","getPayload","preventDefault","isLoggedIn","$on","Place","$resource","method","PlacesIndexController","placesIndex","PlacesShowController","deletePlace","placesShow","PlacesEditController","placesEdit","PlacesNewController","save","placesNew","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","currentUserId","UsersEditController","usersEdit","localStorage","removeItem","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\n\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map Here</div>',\n    scope: {\n      places: '='\n    },\n    link: function ($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.5087903,\n          lng: -0.1137814\n        },\n        zoom: 14\n      });\n\n      $scope.$watch('places.length', () => {\n        console.log($scope.places.length);\n        if($scope.places.length > 0) {\n          $scope.places.forEach((place) => {\n            const marker = new $window.google.maps.Marker({\n              position: { lat: place.lat, lng: place.lng },\n              map: map,\n              animation: $window.google.maps.Animation.DROP\n            });\n\n            const infowindow = new $window.google.maps.InfoWindow({\n              content: `<div>${ place.name }</div>\n              <a href=\"http://localhost:8000/#!/places/${ place.id }\">Click Here To View Listings For This Place ${ place.id }</a>`\n            });\n\n            marker.addListener('click', function() {\n              infowindow.open(map,marker);\n            });\n\n          });\n        }\n      });\n\n\n      // Try HTML5 geolocation else put the user in central London.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          map.setCenter(pos);\n          map.setZoom(18);\n        });\n      }\n\n    }\n  };\n}\n","angular.module('finalProject')\n.directive('googlePlace', googlePlace);\n\ngooglePlace.$inject = ['$window'];\n\nfunction googlePlace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      place: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        $scope.place.lat = latLng.lat;\n        $scope.place.lng = latLng.lng;\n\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n.controller('ListingsIndexController', ListingsIndexController)\n.controller('ListingsShowController', ListingsShowController)\n.controller('ListingsNewController', ListingsNewController)\n.controller('ListingsEditController', ListingsEditController);\n\nListingsIndexController.$inject = ['Listing'];\nfunction ListingsIndexController(Listing) {\n  const listingsIndex = this;\n\n  listingsIndex.all = Listing.query();\n\n}\n\nListingsShowController.$inject = ['Listing', '$state'];\nfunction ListingsShowController(Listing, $state) {\n  const listingsShow = this;\n\n  listingsShow.listing = Listing.get($state.params);\n\n  function deleteListing() {\n    listingsShow.listing.$remove(() => {\n      $state.go('listingsIndex');\n    });\n  }\n\n  listingsShow.delete = deleteListing;\n}\n\nListingsEditController.$inject = ['Listing', '$state'];\nfunction ListingsEditController(Listing, $state) {\n  const listingsEdit = this;\n\n  listingsEdit.listing = Listing.get($state.params);\n\n  function update() {\n    listingsEdit.listing.$update(() => {\n      $state.go('listingsShow', $state.params);\n    });\n  }\n\n  listingsEdit.update = update;\n\n}\n\nListingsNewController.$inject = ['Listing', '$state'];\nfunction ListingsNewController($listing, $state) {\n  const listingsNew = this;\n\n  listingsNew.listing = {};\n\n  function submit() {\n    $listing.create($state.params)\n      .then(() => {\n        $state.go('listingsIndex');\n      });\n  }\n\n  listingsNew.submit = submit;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\n\nfunction MainController($auth, $state, $rootScope) {\n\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit'\n    && parseFloat(toParams.id) !== $auth.getPayload().id) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('PlacesIndexController', PlacesIndexController)\n.controller('PlacesShowController', PlacesShowController)\n.controller('PlacesNewController', PlacesNewController);\n\nPlacesIndexController.$inject = ['Place'];\nfunction PlacesIndexController(Place) {\n  const placesIndex = this;\n\n  placesIndex.all = Place.query();\n\n}\n\nPlacesShowController.$inject = ['Place', '$state'];\nfunction PlacesShowController(Place, $state) {\n  const placesShow = this;\n\n  placesShow.place = Place.get($state.params);\n\n  function deletePlace() {\n    placesShow.place.$remove(() => {\n      $state.go('placesIndex');\n    });\n  }\n\n  placesShow.delete = deletePlace;\n}\n\nPlacesEditController.$inject = ['Place', '$state'];\nfunction PlacesEditController(Place, $state) {\n  const placesEdit = this;\n\n  placesEdit.place = Place.get($state.params);\n\n  function update() {\n    placesEdit.place.$update(() => {\n      $state.go('placesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\nPlacesNewController.$inject = ['Place', '$state'];\nfunction PlacesNewController(Place, $state) {\n  const placesNew = this;\n\n  placesNew.place = {};\n\n  function submit() {\n    Place.save(placesNew.place)\n      .then(() => {\n        $state.go('listingsNew(place)');\n      });\n  }\n\n  placesNew.submit = submit;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n    .state('placesIndex', {\n      url: '/places',\n      templateUrl: '/templates/placesIndex.html',\n      controller: 'PlacesIndexController as placesIndex'\n    })\n\n    .state('placesNew', {\n      url: '/places/new',\n      templateUrl: '/templates/placesNew.html',\n      controller: 'PlacesNewController as placesNew'\n    })\n\n    .state('placesShow', {\n      url: '/places/:id',\n      templateUrl: '/templates/placesShow.html',\n      controller: 'PlacesShowController as placesShow'\n    })\n\n    .state('listingsIndex', {\n      url: '/listings',\n      templateUrl: '/templates/listingsIndex.html',\n      controller: 'ListingsIndexController as listingsIndex'\n    })\n\n    .state('listingsNew', {\n      url: '/listings/new',\n      templateUrl: '/templates/listingsNew.html',\n      controller: 'ListingsNewController as listingsNew'\n    })\n\n    .state('listingsShow', {\n      url: '/listings/:id',\n      templateUrl: '/templates/listingsShow.html',\n      controller: 'ListingsShowController as listingsShow'\n    });\n\n  $urlRouterProvider.otherwise('/login');\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n  usersShow.currentUserId = $auth.getPayload().id; // { id: 1 }\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return usersShow.user.id === usersShow.currentUserId;\n  }\n\n  usersShow.isCurrentUser = isCurrentUser();\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n  function logout() {\n    localStorage.removeItem('token');\n    $state.go('login');\n  }\n  usersEdit.logout = logout;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}