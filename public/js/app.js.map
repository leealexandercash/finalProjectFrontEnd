{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/controllers/main.js","js/models/place.js","js/controllers/places.js","js/router.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","restrict","replace","template","scope","places","link","$scope","element","map","google","maps","Map","center","lat","lng","zoom","$watch","length","forEach","place","Marker","position","animation","Animation","DROP","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","setCenter","setZoom","MainController","$rootScope","logout","secureState","e","toState","toParams","main","message","isAuthenticated","protectedStates","includes","name","parseFloat","id","getPayload","preventDefault","isLoggedIn","$on","Place","$resource","update","method","PlacesIndexController","placesIndex","all","query","PlacesShowController","deletePlace","placesShow","$remove","isCurrentPlace","currentPlaceId","get","params","delete","PlacesEditController","placesEdit","$update","localStorage","removeItem","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","User","usersIndex","UsersShowController","deleteUser","usersShow","isCurrentUser","currentUserId","UsersEditController","usersEdit","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\n\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map Here</div>',\n    scope: {\n      places: '='\n    },\n    link: function ($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.5087903,\n          lng: -0.1137814\n        },\n        zoom: 14\n      });\n\n      $scope.$watch('places.length', () => {\n        if($scope.places.length > 0) {\n          $scope.places.forEach((place) => {\n            new $window.google.maps.Marker({\n              position: { lat: place.lat, lng: place.lng },\n              map: map,\n              animation: $window.google.maps.Animation.DROP\n            });\n\n          });\n        }\n      });\n\n      // Try HTML5 geolocation else put the user in central London.\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(function(position) {\n          const pos = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          map.setCenter(pos);\n          map.setZoom(18);\n        });\n      }\n\n    }\n  };\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\n\nfunction MainController($auth, $state, $rootScope) {\n\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit'\n    && parseFloat(toParams.id) !== $auth.getPayload().id) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('PlacesIndexController', PlacesIndexController);\n\nPlacesIndexController.$inject = ['Place'];\nfunction PlacesIndexController(Place) {\n  const placesIndex = this;\n\n  placesIndex.all = Place.query();\n\n}\n\nPlacesShowController.$inject = ['Place', '$state'];\nfunction PlacesShowController(Place, $state) {\n  const placesShow = this;\n\n  placesShow.user = Place.get($state.params);\n\n  function deletePlace() {\n    placesShow.user.$remove(() => {\n      $state.go('placesIndex');\n    });\n  }\n\n  placesShow.delete = deletePlace;\n\n  function isCurrentPlace() {\n    return placesShow.user.id === placesShow.currentPlaceId;\n  }\n\n  placesShow.isCurrentPlace = isCurrentPlace();\n\n}\n\nPlacesEditController.$inject = ['Place', '$state'];\nfunction PlacesEditController(Place, $state) {\n  const placesEdit = this;\n\n  placesEdit.user = Place.get($state.params);\n\n  function update() {\n    placesEdit.user.$update(() => {\n      $state.go('placesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n  function logout() {\n    localStorage.removeItem('token');\n    $state.go('login');\n  }\n  placesEdit.logout = logout;\n\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n    .state('placesIndex', {\n      url: '/places',\n      templateUrl: '/templates/placesIndex.html',\n      controller: 'PlacesIndexController as placesIndex'\n    });\n\n  $urlRouterProvider.otherwise('/login');\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n  usersShow.currentUserId = $auth.getPayload().id; // { id: 1 }\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return usersShow.user.id === usersShow.currentUserId;\n  }\n\n  usersShow.isCurrentUser = isCurrentUser();\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n  function logout() {\n    localStorage.removeItem('token');\n    $state.go('login');\n  }\n  usersEdit.logout = logout;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}