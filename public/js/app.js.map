{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/directives/googlePlace.js","js/directives/imageUpload.js","js/models/listing.js","js/controllers/listings.js","js/controllers/main.js","js/models/place.js","js/controllers/places.js","js/router.js","js/models/users.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","googleMap","$window","restrict","replace","template","scope","places","place","link","$scope","element","map","google","maps","Map","center","lat","lng","zoom","$watch","pos","setCenter","setZoom","Marker","position","animation","Animation","DROP","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","length","forEach","listings","marker","infowindow","InfoWindow","content","name","id","addListener","open","googlePlace","require","attrs","model","options","types","componentRestrictions","country","autocomplete","Autocomplete","getPlace","latLng","geometry","location","toJSON","console","log","google_place_id","place_id","address","formatted_address","phone_number","formatted_phone_number","icon","rating","website","$setViewValue","val","imageUpload","reader","FileReader","templateUrl","base64","parseFile","e","file","target","files","dataTransfer","readAsDataURL","isMobile","maxTouchPoints","msMaxTouchPoints","active","onload","result","$apply","on","preventDefault","angular","document","ready","fileInput","querySelector","Listing","$resource","update","method","ListingsIndexController","listingsIndex","all","query","ListingsShowController","deleteListing","listingsShow","listing","$remove","get","params","delete","ListingsEditController","listingsEdit","$update","ListingsNewController","save","listingsNew","placeId","MainController","$rootScope","logout","secureState","toState","toParams","main","message","isAuthenticated","protectedStates","includes","parseFloat","getPayload","isLoggedIn","$on","Place","PlacesIndexController","placesIndex","PlacesShowController","isCurrentUser","placesShow","deletePlace","remove","PlacesEditController","placesEdit","PlacesNewController","placesNew","Router","$stateProvider","$urlRouterProvider","state","url","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","Number","deleteUser","usersShow","currentUserId","UsersEditController","usersEdit","localStorage","removeItem","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('placesIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\n\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\">Google Map Here</div>',\n    scope: {\n      places: '=',\n      place: '='\n    },\n    link: function ($scope, element) {\n\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.51522,\n          lng: -0.07214\n        },\n        zoom: 17\n      });\n\n      $scope.$watch('place.$resolved', () => {\n        if($scope.place.lat && $scope.place.lng) {\n          const pos = {\n            lat: $scope.place.lat,\n            lng: $scope.place.lng\n          };\n\n          map.setCenter(pos);\n          map.setZoom(18);\n\n          new $window.google.maps.Marker({\n            position: pos,\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n        }\n      });\n\n      $scope.$watch('places.length', () => {\n\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function(position) {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            };\n            map.setCenter(pos);\n            map.setZoom(17);\n          });\n        }\n\n        if($scope.places.length > 0) {\n\n          $scope.places.forEach((place) => {\n\n            if(place.listings.length > 0) {\n              const marker = new $window.google.maps.Marker({\n                position: { lat: place.lat, lng: place.lng },\n                map: map,\n                animation: $window.google.maps.Animation.DROP\n              });\n\n              const infowindow = new $window.google.maps.InfoWindow({\n                content: `<div>${ place.name }</div>\n                <a href=\"../#/places/${ place.id }\">Click To View Listings For <br> ${ place.name }</a>`\n              });\n              map.setZoom(17);\n              marker.addListener('click', function() {\n                infowindow.open(map,marker);\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n.directive('googlePlace', googlePlace);\n\ngooglePlace.$inject = ['$window'];\n\nfunction googlePlace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      place: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: { country: 'GB' }\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        console.log(place);\n\n        $scope.place.lat = latLng.lat;\n        $scope.place.lng = latLng.lng;\n        $scope.place.google_place_id = place.place_id;\n        $scope.place.address = place.formatted_address;\n        $scope.place.phone_number = place.formatted_phone_number;\n        $scope.place.icon = place.icon;\n        $scope.place.name = place.name;\n        $scope.place.rating = place.rating;\n        $scope.place.website = place.website;\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('imageUpload', imageUpload);\n\nimageUpload.$inject = ['$window'];\nfunction imageUpload ($window) {\n\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: '/templates/imageUpload.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n      $scope.isMobile = (('ontouchstart' in $window)||($window.navigator.maxTouchPoints > 0)||($window.navigator.msMaxTouchPoints > 0));\n\n      function parseFile(e) {\n        const file = (e.target.files || e.dataTransfer.files)[0];\n        reader.readAsDataURL(file);\n      }\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n\n          parseFile(e);\n        });\n\n      angular.element(document).ready(function() {\n        const fileInput = angular.element(element[0].querySelector('input[type=\"file\"]'));\n\n        if(fileInput) {\n          fileInput.on('change', (e) => {\n            parseFile(e);\n          });\n        }\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .factory('Listing', Listing);\n\nListing.$inject = ['$resource', 'API_URL'];\nfunction Listing($resource, API_URL) {\n  return new $resource(`${API_URL}/listings/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ListingsIndexController', ListingsIndexController)\n.controller('ListingsShowController', ListingsShowController)\n.controller('ListingsNewController', ListingsNewController)\n.controller('ListingsEditController', ListingsEditController);\n\nListingsIndexController.$inject = ['Listing'];\n\nfunction ListingsIndexController(Listing) {\n  const listingsIndex = this;\n\n  listingsIndex.all = Listing.query();\n}\n\nListingsShowController.$inject = ['Listing', '$state'];\nfunction ListingsShowController(Listing, $state) {\n  const listingsShow = this;\n\n  listingsShow.listing = Listing.get($state.params);\n\n  function deleteListing() {\n    listingsShow.listing.$remove(() => {\n      $state.go('placesIndex');\n    });\n  }\n  listingsShow.delete = deleteListing;\n}\n\nListingsEditController.$inject = ['Listing', '$state'];\nfunction ListingsEditController(Listing, $state) {\n  const listingsEdit = this;\n  listingsEdit.listing = Listing.get($state.params);\n\n  function update() {\n    listingsEdit.listing.$update((listing) => {\n      $state.go('placesShow', { id: listing.place.id });\n    });\n  }\n  listingsEdit.update = update;\n}\n\nListingsNewController.$inject = ['Listing', '$state'];\nfunction ListingsNewController(Listing, $state) {\n  const listingsNew = this;\n\n  listingsNew.listing = {\n    place_id: $state.params.placeId\n  };\n\n  function submit() {\n    Listing.save(listingsNew.listing, (listing) => {\n      $state.go('placesShow', { id: listing.place.id });\n    });\n  }\n  listingsNew.submit = submit;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\n\nfunction MainController($auth, $state, $rootScope) {\n\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('placesIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit'\n    && parseFloat(toParams.id) !== $auth.getPayload().id) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('PlacesIndexController', PlacesIndexController)\n.controller('PlacesShowController', PlacesShowController)\n.controller('PlacesNewController', PlacesNewController);\n\nPlacesIndexController.$inject = ['Place'];\nfunction PlacesIndexController(Place) {\n  const placesIndex = this;\n\n  placesIndex.all = Place.query();\n}\n\nPlacesShowController.$inject = ['Place', '$state', 'Listing', '$auth'];\nfunction PlacesShowController(Place, $state, Listing, $auth) {\n  const placesShow = this;\n\n  function isCurrentUser() {\n    return $auth.isAuthenticated() && placesShow.place && $auth.getPayload().id === placesShow.place.user.id;\n  }\n\n  placesShow.isCurrentUser = isCurrentUser;\n\n  console.log(Place.get({id: 10}));\n\n  placesShow.place = Place.get($state.params);\n\n  function deletePlace() {\n    placesShow.place.$remove(() => {\n      $state.go('placesIndex');\n    });\n  }\n\n  function deleteListing(listing) {\n    console.log(listing);\n    Listing.listing.remove(() => {\n      $state.go('listingsIndex');\n    });\n  }\n\n  placesShow.deleteListing = deleteListing;\n  placesShow.delete = deletePlace;\n}\n\nPlacesEditController.$inject = ['Place', '$state'];\nfunction PlacesEditController(Place, $state) {\n  const placesEdit = this;\n\n  placesEdit.place = Place.get($state.params);\n\n  function update() {\n    placesEdit.place.$update(() => {\n      $state.go('placesShow', $state.params);\n    });\n  }\n  placesEdit.update = update;\n}\n\nPlacesNewController.$inject = ['Place', '$state'];\nfunction PlacesNewController(Place, $state) {\n  const placesNew = this;\n\n  placesNew.place = {};\n\n  function submit() {\n    Place.save(placesNew.place, (place) => {\n      console.log('gets here!');\n      $state.go('listingsNew', { placeId: place.id });\n    });\n  }\n  placesNew.submit = submit;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n    .state('placesIndex', {\n      url: '/places',\n      templateUrl: '/templates/placesIndex.html',\n      controller: 'PlacesIndexController as placesIndex'\n    })\n\n    .state('placesNew', {\n      url: '/places/new',\n      templateUrl: '/templates/placesNew.html',\n      controller: 'PlacesNewController as placesNew'\n    })\n\n    .state('listingsNew', {\n      url: '/places/:placeId/listings/new',\n      templateUrl: '/templates/listingsNew.html',\n      controller: 'ListingsNewController as listingsNew'\n    })\n\n    .state('placesShow', {\n      url: '/places/:id',\n      templateUrl: '/templates/placesShow.html',\n      controller: 'PlacesShowController as placesShow'\n    })\n\n    .state('listingsIndex', {\n      url: '/listings',\n      templateUrl: '/templates/listingsIndex.html',\n      controller: 'ListingsIndexController as listingsIndex'\n    })\n\n    .state('listingsEdit', {\n      url: '/listings/:id/edit',\n      templateUrl: '/templates/listingsEdit.html',\n      controller: 'ListingsEditController as listingsEdit'\n    })\n\n    .state('listingsShow', {\n      url: '/listings/:id',\n      templateUrl: '/templates/listingsShow.html',\n      controller: 'ListingsShowController as listingsShow'\n    });\n\n\n  $urlRouterProvider.otherwise('/places');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n  usersShow.currentUserId = $auth.getPayload().id; // { id: 1 }\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n\n  function isCurrentUser() {\n    return usersShow.user.id === usersShow.currentUserId;\n  }\n\n  usersShow.isCurrentUser = isCurrentUser();\n\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n  function logout() {\n    localStorage.removeItem('token');\n    $state.go('login');\n  }\n  usersEdit.logout = logout;\n\n}\n"]}